apiVersion: apps/v1
kind: Deployment
metadata:
  name: partpal-api
  namespace: partpal
  labels:
    app: partpal-api
    component: backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: partpal-api
  template:
    metadata:
      labels:
        app: partpal-api
        component: backend
    spec:
      containers:
      - name: api
        image: partpal/api:latest
        ports:
        - containerPort: 3333
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: partpal-config
              key: NODE_ENV
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: partpal-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: partpal-secrets
              key: redis-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: partpal-secrets
              key: jwt-secret
        - name: CLOUDINARY_CLOUD_NAME
          valueFrom:
            secretKeyRef:
              name: partpal-secrets
              key: cloudinary-cloud-name
        - name: CLOUDINARY_API_KEY
          valueFrom:
            secretKeyRef:
              name: partpal-secrets
              key: cloudinary-api-key
        - name: CLOUDINARY_API_SECRET
          valueFrom:
            secretKeyRef:
              name: partpal-secrets
              key: cloudinary-api-secret
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3333
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3333
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: partpal-api-service
  namespace: partpal
spec:
  selector:
    app: partpal-api
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3333
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: partpal-api-ingress
  namespace: partpal
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "500"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://partpal.co.za,https://ims.partpal.co.za"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
spec:
  tls:
  - hosts:
    - api.partpal.co.za
    secretName: partpal-api-tls
  rules:
  - host: api.partpal.co.za
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: partpal-api-service
            port:
              number: 80