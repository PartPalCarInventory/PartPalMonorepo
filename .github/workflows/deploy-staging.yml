name: Deploy to Staging

on:
  push:
    branches: [develop]
  workflow_dispatch:
    inputs:
      deploy_ims:
        description: 'Deploy IMS'
        required: false
        default: 'true'
        type: boolean
      deploy_marketplace:
        description: 'Deploy Marketplace'
        required: false
        default: 'true'
        type: boolean
      deploy_api:
        description: 'Deploy API'
        required: false
        default: 'true'
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_STAGING }}
  NAMESPACE: partpal-staging

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      apps-ims: ${{ steps.changes.outputs.apps-ims }}
      apps-marketplace: ${{ steps.changes.outputs.apps-marketplace }}
      services-api: ${{ steps.changes.outputs.services-api }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            apps-ims:
              - 'apps/ims/**'
              - 'packages/**'
            apps-marketplace:
              - 'apps/marketplace/**'
              - 'packages/**'
            services-api:
              - 'services/api/**'
              - 'packages/**'

  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: changes
    environment: staging
    strategy:
      matrix:
        include:
          - app: ims
            port: 3001
            service_name: partpal-ims-staging
            condition: ${{ needs.changes.outputs.apps-ims == 'true' || github.event.inputs.deploy_ims == 'true' }}
          - app: marketplace
            port: 3000
            service_name: partpal-marketplace-staging
            condition: ${{ needs.changes.outputs.apps-marketplace == 'true' || github.event.inputs.deploy_marketplace == 'true' }}
          - app: api
            port: 3333
            service_name: partpal-api-staging
            condition: ${{ needs.changes.outputs.services-api == 'true' || github.event.inputs.deploy_api == 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: |
          echo "${{ env.KUBE_CONFIG_DATA }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Create namespace if not exists
        run: |
          export KUBECONFIG=kubeconfig
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy ${{ matrix.app }} to staging
        if: ${{ matrix.condition == 'true' }}
        run: |
          export KUBECONFIG=kubeconfig

          # Create deployment manifest
          cat <<EOF | kubectl apply -f -
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: ${{ matrix.service_name }}
            namespace: ${{ env.NAMESPACE }}
            labels:
              app: ${{ matrix.service_name }}
              environment: staging
          spec:
            replicas: 2
            selector:
              matchLabels:
                app: ${{ matrix.service_name }}
            template:
              metadata:
                labels:
                  app: ${{ matrix.service_name }}
                  environment: staging
              spec:
                containers:
                - name: ${{ matrix.app }}
                  image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.app }}:develop
                  ports:
                  - containerPort: ${{ matrix.port }}
                  env:
                  - name: NODE_ENV
                    value: "staging"
                  - name: DATABASE_URL
                    valueFrom:
                      secretKeyRef:
                        name: partpal-staging-secrets
                        key: database-url
                  - name: REDIS_URL
                    valueFrom:
                      secretKeyRef:
                        name: partpal-staging-secrets
                        key: redis-url
                  resources:
                    requests:
                      memory: "256Mi"
                      cpu: "250m"
                    limits:
                      memory: "512Mi"
                      cpu: "500m"
                  livenessProbe:
                    httpGet:
                      path: /api/health
                      port: ${{ matrix.port }}
                    initialDelaySeconds: 30
                    periodSeconds: 10
                  readinessProbe:
                    httpGet:
                      path: /api/health
                      port: ${{ matrix.port }}
                    initialDelaySeconds: 5
                    periodSeconds: 5
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: ${{ matrix.service_name }}-service
            namespace: ${{ env.NAMESPACE }}
          spec:
            selector:
              app: ${{ matrix.service_name }}
            ports:
            - protocol: TCP
              port: 80
              targetPort: ${{ matrix.port }}
            type: ClusterIP
          EOF

      - name: Wait for deployment rollout
        if: ${{ matrix.condition == 'true' }}
        run: |
          export KUBECONFIG=kubeconfig
          kubectl rollout status deployment/${{ matrix.service_name }} -n ${{ env.NAMESPACE }} --timeout=300s

      - name: Run smoke tests
        if: ${{ matrix.condition == 'true' }}
        run: |
          export KUBECONFIG=kubeconfig
          kubectl wait --for=condition=ready pod -l app=${{ matrix.service_name }} -n ${{ env.NAMESPACE }} --timeout=120s

          # Get pod IP for smoke test
          POD_IP=$(kubectl get pods -l app=${{ matrix.service_name }} -n ${{ env.NAMESPACE }} -o jsonpath='{.items[0].status.podIP}')

          # Simple health check
          kubectl run smoke-test-${{ matrix.app }} --rm -i --restart=Never --image=curlimages/curl -- \
            sh -c "curl -f http://$POD_IP:${{ matrix.port }}/api/health || exit 1"

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Notify success
        if: needs.deploy.result == 'success'
        run: |
          echo "✅ Staging deployment completed successfully"
          echo "Environment: https://staging.partpal.co.za"

      - name: Notify failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ Staging deployment failed"
          exit 1