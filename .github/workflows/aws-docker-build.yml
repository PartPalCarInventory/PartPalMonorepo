name: AWS ECR Docker Build and Push

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'apps/**'
      - 'services/**'
      - 'packages/**'
      - 'infrastructure/docker/**'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'apps/**'
      - 'services/**'
      - 'packages/**'
      - 'infrastructure/docker/**'

env:
  AWS_REGION: af-south-1
  ECR_REGISTRY_PREFIX: partpal

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      ims: ${{ steps.changes.outputs.ims }}
      api: ${{ steps.changes.outputs.api }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Detect Changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            ims:
              - 'apps/ims/**'
              - 'packages/**'
              - 'infrastructure/docker/Dockerfile.ims'
            api:
              - 'services/api/**'
              - 'packages/shared-types/**'
              - 'packages/shared-utils/**'
              - 'infrastructure/docker/Dockerfile.api'

  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.ims == 'true' || needs.detect-changes.outputs.api == 'true'

    strategy:
      matrix:
        service:
          - name: ims
            dockerfile: infrastructure/docker/Dockerfile.ims
            context: .
            condition: ${{ needs.detect-changes.outputs.ims == 'true' }}
          - name: api
            dockerfile: infrastructure/docker/Dockerfile.api
            context: .
            condition: ${{ needs.detect-changes.outputs.api == 'true' }}

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout Code
        if: matrix.service.condition
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        if: matrix.service.condition
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        if: matrix.service.condition
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        if: matrix.service.condition
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        if: matrix.service.condition
        id: meta
        run: |
          # Determine environment
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            ENV="production"
          elif [ "${{ github.ref }}" == "refs/heads/develop" ]; then
            ENV="staging"
          else
            ENV="dev"
          fi

          # Set ECR repository name
          ECR_REPOSITORY="${{ env.ECR_REGISTRY_PREFIX }}-${ENV}-${{ matrix.service.name }}"

          # Generate tags
          TAGS="${{ steps.login-ecr.outputs.registry }}/${ECR_REPOSITORY}:${GITHUB_SHA::8}"
          TAGS="${TAGS},${{ steps.login-ecr.outputs.registry }}/${ECR_REPOSITORY}:${ENV}"

          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            TAGS="${TAGS},${{ steps.login-ecr.outputs.registry }}/${ECR_REPOSITORY}:latest"
          fi

          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "ecr_repository=${ECR_REPOSITORY}" >> $GITHUB_OUTPUT
          echo "environment=${ENV}" >> $GITHUB_OUTPUT

      - name: Build and Push Docker Image
        if: matrix.service.condition
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ github.ref_name }}

      - name: Scan image with Trivy
        if: matrix.service.condition
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ steps.meta.outputs.ecr_repository }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service.name }}.sarif'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

      - name: Upload Trivy results to GitHub Security
        if: matrix.service.condition && github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results-${{ matrix.service.name }}.sarif'
        continue-on-error: true

      - name: Image Details
        if: matrix.service.condition
        run: |
          echo "## Docker Image Built Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Service:** ${{ matrix.service.name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ steps.meta.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ steps.meta.outputs.ecr_repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: build-and-push
    if: always()
    steps:
      - name: Security Scan Summary
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All images have been scanned with Trivy for vulnerabilities." >> $GITHUB_STEP_SUMMARY
          echo "Check the Security tab for detailed findings." >> $GITHUB_STEP_SUMMARY
