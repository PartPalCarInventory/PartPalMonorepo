name: PartPal Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/partpal_test'
  REDIS_URL: 'redis://localhost:6379/1'
  JWT_SECRET: 'test-jwt-secret-for-ci-only'

jobs:
  # Lint and Type Check
  lint-and-types:
    name: Lint & Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        run: pnpm lint

      - name: Run TypeScript type checking
        run: pnpm typecheck

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        package: [
          'shared-ui',
          'shared-utils',
          'shared-types',
          'database'
        ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ${{ matrix.package }} tests
        run: pnpm --filter @partpal/${{ matrix.package }} test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./packages/${{ matrix.package }}/coverage/lcov.info
          flags: ${{ matrix.package }}
          name: ${{ matrix.package }}
          fail_ci_if_error: false

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: partpal_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup database
        run: |
          pnpm --filter @partpal/database db:generate
          pnpm --filter @partpal/database db:push

      - name: Run API integration tests
        run: pnpm --filter @partpal/api test
        env:
          NODE_ENV: test

      - name: Upload API test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./services/api/coverage/lcov.info
          flags: api-integration
          name: api-integration
          fail_ci_if_error: false

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        app: ['ims', 'marketplace']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ${{ matrix.app }} tests
        run: pnpm --filter @partpal/${{ matrix.app }} test

      - name: Upload ${{ matrix.app }} coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/${{ matrix.app }}/coverage/lcov.info
          flags: ${{ matrix.app }}-frontend
          name: ${{ matrix.app }}-frontend
          fail_ci_if_error: false

  # E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: partpal_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Setup database
        run: |
          pnpm --filter @partpal/database db:generate
          pnpm --filter @partpal/database db:push
          pnpm --filter @partpal/database db:seed

      - name: Build applications
        run: |
          pnpm --filter @partpal/ims build
          pnpm --filter @partpal/marketplace build

      - name: Start applications in background
        run: |
          pnpm --filter @partpal/api start &
          pnpm --filter @partpal/ims start &
          pnpm --filter @partpal/marketplace start &
        env:
          NODE_ENV: test

      - name: Wait for applications to start
        run: |
          pnpm exec wait-on http://localhost:3333/health
          pnpm exec wait-on http://localhost:3001
          pnpm exec wait-on http://localhost:3000
        timeout-minutes: 5

      - name: Run Playwright tests
        run: pnpm test:e2e
        working-directory: tests

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report
          path: tests/playwright-report/
          retention-days: 30

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level=moderate

      - name: Check for vulnerabilities
        run: |
          if pnpm audit --audit-level=high; then
            echo "No high-severity vulnerabilities found"
          else
            echo "High-severity vulnerabilities detected"
            exit 1
          fi

  # Performance Tests (optional, runs on schedule)
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf]')

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: partpal_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Lighthouse CI
        run: pnpm add -g @lhci/cli

      - name: Setup database with test data
        run: |
          pnpm --filter @partpal/database db:generate
          pnpm --filter @partpal/database db:push
          pnpm --filter @partpal/database db:seed

      - name: Build and start applications
        run: |
          pnpm build
          pnpm --filter @partpal/api start &
          pnpm --filter @partpal/ims start &
          pnpm --filter @partpal/marketplace start &

      - name: Wait for applications
        run: |
          pnpm exec wait-on http://localhost:3333/health
          pnpm exec wait-on http://localhost:3001
          pnpm exec wait-on http://localhost:3000

      - name: Run Lighthouse CI
        run: lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [lint-and-types, unit-tests, integration-tests, frontend-tests, e2e-tests, security-audit]
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "Lint & Types: ${{ needs.lint-and-types.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Frontend Tests: ${{ needs.frontend-tests.result }}"
          echo "E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "Security Audit: ${{ needs.security-audit.result }}"

          if [[ "${{ needs.lint-and-types.result }}" != "success" ]] || \
             [[ "${{ needs.unit-tests.result }}" != "success" ]] || \
             [[ "${{ needs.integration-tests.result }}" != "success" ]] || \
             [[ "${{ needs.frontend-tests.result }}" != "success" ]] || \
             [[ "${{ needs.e2e-tests.result }}" != "success" ]] || \
             [[ "${{ needs.security-audit.result }}" != "success" ]]; then
            echo "One or more test jobs failed"
            exit 1
          else
            echo "All tests passed successfully!"
          fi

      - name: Post summary comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const summary = [
              '## PartPal Test Results 🧪',
              '',
              `| Test Suite | Status |`,
              `|------------|--------|`,
              `| Lint & Types | ${{ needs.lint-and-types.result == 'success' && '✅ Passed' || '❌ Failed' }} |`,
              `| Unit Tests | ${{ needs.unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |`,
              `| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |`,
              `| Frontend Tests | ${{ needs.frontend-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |`,
              `| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |`,
              `| Security Audit | ${{ needs.security-audit.result == 'success' && '✅ Passed' || '❌ Failed' }} |`,
              '',
              'View detailed test results in the [Actions tab](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).'
            ].join('\n');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });