name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.changes.outputs.packages }}
      apps-ims: ${{ steps.changes.outputs.apps-ims }}
      apps-marketplace: ${{ steps.changes.outputs.apps-marketplace }}
      services-api: ${{ steps.changes.outputs.services-api }}
      infrastructure: ${{ steps.changes.outputs.infrastructure }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            packages:
              - 'packages/**'
              - 'package.json'
              - 'turbo.json'
            apps-ims:
              - 'apps/ims/**'
              - 'packages/**'
            apps-marketplace:
              - 'apps/marketplace/**'
              - 'packages/**'
            services-api:
              - 'services/api/**'
              - 'packages/**'
            infrastructure:
              - 'infrastructure/**'
              - 'docker-compose.yml'
              - 'Dockerfile'

  lint-and-typecheck:
    name: Lint and Typecheck
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.packages == 'true' || needs.changes.outputs.apps-ims == 'true' || needs.changes.outputs.apps-marketplace == 'true' || needs.changes.outputs.services-api == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: pnpm lint
        continue-on-error: false

      - name: Generate lint report
        if: always()
        run: |
          echo "## Linting Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          pnpm lint --format=json > lint-report.json || true
          if [ -f "lint-report.json" ]; then
            echo "Lint report generated successfully" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload lint report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-report
          path: lint-report.json
          retention-days: 7

      - name: Run type checking
        run: pnpm typecheck

      - name: Check for type errors
        if: always()
        run: |
          echo "## Type Check Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Type checking completed" >> $GITHUB_STEP_SUMMARY

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.packages == 'true' || needs.changes.outputs.apps-ims == 'true' || needs.changes.outputs.apps-marketplace == 'true' || needs.changes.outputs.services-api == 'true' }}

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: partpal
          POSTGRES_PASSWORD: partpal_test
          POSTGRES_DB: partpal_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests with coverage
        run: pnpm test -- --coverage --passWithNoTests
        env:
          DATABASE_URL: postgresql://partpal:partpal_test@localhost:5432/partpal_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
          JWT_SECRET: test-jwt-secret-for-ci-only

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info,./apps/ims/coverage/lcov.info,./apps/marketplace/coverage/lcov.info,./services/api/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Generate coverage summary
        run: |
          echo "## Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f "coverage/coverage-summary.json" ]; then
            node -e "const c=require('./coverage/coverage-summary.json'); console.log('| Metric | Coverage |'); console.log('|--------|----------|'); console.log('| Lines | ' + c.total.lines.pct + '% |'); console.log('| Branches | ' + c.total.branches.pct + '% |'); console.log('| Functions | ' + c.total.functions.pct + '% |'); console.log('| Statements | ' + c.total.statements.pct + '% |');" >> $GITHUB_STEP_SUMMARY
          else
            echo "Coverage data not available" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check coverage thresholds
        run: |
          echo "Checking test coverage meets minimum thresholds..."
          # This will be enforced once tests are written
          # For now, allow builds to pass even with low coverage

  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: [changes, lint-and-typecheck, test]
    if: ${{ needs.changes.outputs.packages == 'true' || needs.changes.outputs.apps-ims == 'true' || needs.changes.outputs.apps-marketplace == 'true' || needs.changes.outputs.services-api == 'true' }}
    strategy:
      matrix:
        app: [ims, marketplace, api]
        exclude:
          - app: ims
            condition: ${{ needs.changes.outputs.apps-ims != 'true' && needs.changes.outputs.packages != 'true' }}
          - app: marketplace
            condition: ${{ needs.changes.outputs.apps-marketplace != 'true' && needs.changes.outputs.packages != 'true' }}
          - app: api
            condition: ${{ needs.changes.outputs.services-api != 'true' && needs.changes.outputs.packages != 'true' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build IMS
        if: matrix.app == 'ims'
        run: pnpm --filter @partpal/ims build

      - name: Build Marketplace
        if: matrix.app == 'marketplace'
        run: pnpm --filter @partpal/marketplace build

      - name: Build API
        if: matrix.app == 'api'
        run: pnpm --filter @partpal/api build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.app }}
          path: |
            apps/${{ matrix.app }}/.next/
            services/${{ matrix.app }}/dist/
          retention-days: 1

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.packages == 'true' || needs.changes.outputs.apps-ims == 'true' || needs.changes.outputs.apps-marketplace == 'true' || needs.changes.outputs.services-api == 'true' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level=moderate
        continue-on-error: true

      - name: Generate audit report
        run: |
          pnpm audit --json > audit-report.json || true
          echo "## Security Audit Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f "audit-report.json" ]; then
            echo "Security audit completed. Check artifacts for detailed report." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload audit report
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report
          path: audit-report.json
          retention-days: 30

      - name: Run dependency check
        uses: actions/dependency-review-action@v3
        if: github.event_name == 'pull_request'

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Check for secrets in code
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD