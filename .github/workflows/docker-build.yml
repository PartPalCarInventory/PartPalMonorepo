name: Docker Build and Push

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'apps/**'
      - 'services/**'
      - 'packages/**'
      - 'infrastructure/docker/**'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'apps/**'
      - 'services/**'
      - 'packages/**'
      - 'infrastructure/docker/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: partpal

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      marketplace: ${{ steps.changes.outputs.marketplace }}
      ims: ${{ steps.changes.outputs.ims }}
      api: ${{ steps.changes.outputs.api }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Detect Changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            marketplace:
              - 'apps/marketplace/**'
              - 'packages/**'
              - 'infrastructure/docker/Dockerfile.marketplace'
            ims:
              - 'apps/ims/**'
              - 'packages/**'
              - 'infrastructure/docker/Dockerfile.ims'
            api:
              - 'services/api/**'
              - 'packages/shared-types/**'
              - 'packages/shared-utils/**'
              - 'infrastructure/docker/Dockerfile.api'

  build-marketplace:
    name: Build Marketplace
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.marketplace == 'true'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/marketplace
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and Push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: infrastructure/docker/Dockerfile.marketplace
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-ims:
    name: Build IMS
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.ims == 'true'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/ims
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and Push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: infrastructure/docker/Dockerfile.ims
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-api:
    name: Build API
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.api == 'true'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and Push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: infrastructure/docker/Dockerfile.api
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build-marketplace, build-ims, build-api]
    if: always() && (needs.build-marketplace.result == 'success' || needs.build-ims.result == 'success' || needs.build-api.result == 'success')

    strategy:
      matrix:
        service: [marketplace, ims, api]
        include:
          - service: marketplace
            condition: needs.detect-changes.outputs.marketplace == 'true'
          - service: ims
            condition: needs.detect-changes.outputs.ims == 'true'
          - service: api
            condition: needs.detect-changes.outputs.api == 'true'

    steps:
      - name: Run Trivy Vulnerability Scanner
        if: matrix.condition
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}:sha-${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy Results
        if: matrix.condition
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'