name: Infrastructure Deployment

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'infrastructure/**'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'infrastructure/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: 'af-south-1'

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')

    strategy:
      matrix:
        environment: [development, staging]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: infrastructure/terraform
        run: |
          terraform init \
            -backend-config="key=infrastructure/${{ matrix.environment }}/terraform.tfstate"

      - name: Terraform Validate
        working-directory: infrastructure/terraform
        run: terraform validate

      - name: Terraform Format Check
        working-directory: infrastructure/terraform
        run: terraform fmt -check -recursive

      - name: Terraform Plan
        working-directory: infrastructure/terraform
        run: |
          terraform plan \
            -var-file="terraform.tfvars.${{ matrix.environment }}" \
            -var="environment=${{ matrix.environment }}" \
            -out="tfplan.${{ matrix.environment }}"

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan-${{ matrix.environment }}
          path: infrastructure/terraform/tfplan.${{ matrix.environment }}
          retention-days: 30

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [terraform-plan]

    strategy:
      matrix:
        environment: [development]

    environment:
      name: ${{ matrix.environment }}
      url: https://partpal.co.za

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Plan Artifact
        uses: actions/download-artifact@v3
        with:
          name: terraform-plan-${{ matrix.environment }}
          path: infrastructure/terraform/

      - name: Terraform Init
        working-directory: infrastructure/terraform
        run: |
          terraform init \
            -backend-config="key=infrastructure/${{ matrix.environment }}/terraform.tfstate"

      - name: Terraform Apply
        working-directory: infrastructure/terraform
        run: terraform apply tfplan.${{ matrix.environment }}

      - name: Update Kubeconfig
        run: |
          aws eks update-kubeconfig \
            --region ${{ env.AWS_REGION }} \
            --name partpal-${{ matrix.environment }}

      - name: Deploy Kubernetes Manifests
        run: |
          kubectl apply -f infrastructure/kubernetes/namespace.yaml
          kubectl apply -f infrastructure/kubernetes/configmap.yaml
          kubectl apply -f infrastructure/kubernetes/rbac.yaml
          kubectl apply -f infrastructure/kubernetes/network-policies.yaml
          kubectl apply -f infrastructure/kubernetes/pod-disruption-budgets.yaml

  terraform-production:
    name: Production Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'

    environment:
      name: production
      url: https://partpal.co.za

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: infrastructure/terraform
        run: |
          terraform init \
            -backend-config="key=infrastructure/production/terraform.tfstate"

      - name: Terraform Validate
        working-directory: infrastructure/terraform
        run: terraform validate

      - name: Terraform Plan
        working-directory: infrastructure/terraform
        run: |
          terraform plan \
            -var-file="terraform.tfvars.production" \
            -var="environment=production" \
            -out="tfplan.production"

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        working-directory: infrastructure/terraform
        run: terraform apply tfplan.production

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        working-directory: infrastructure/terraform
        run: |
          terraform destroy \
            -var-file="terraform.tfvars.production" \
            -var="environment=production" \
            -auto-approve

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infrastructure/
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov-results.sarif

      - name: Run TFSec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: infrastructure/terraform